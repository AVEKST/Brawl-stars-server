from Files.CsvLogic.Cards import Cards
from ByteStream.Writer import Writer
from datetime import datetime

class OwnHomeDataMessage(Writer):

    def __init__(self, client, player):
        super().__init__(client)
        self.id = 24101
        self.player = player
        self.time_stamp = int(datetime.timestamp(datetime.now()))

    def encode(self):
        time_stamp = int(datetime.timestamp(datetime.now()))

        self.writeVInt(time_stamp)
        self.writeVInt(time_stamp)

        self.writeVInt(self.player.trophies)
        self.writeVInt(self.player.high_trophies)
        self.writeVInt(self.player.high_trophies)

        self.writeVInt(self.player.trophy_reward)
        self.writeVInt(self.player.exp_points)

        self.writeDataReference(28, self.player.profile_icon)
        self.writeDataReference(43, self.player.name_color)

        self.writeVInt(50)
        for x in range(50):
            self.writeVInt(x)

        self.writeVInt(len(self.player.selected_skins))
        for x in self.player.selected_skins:
            self.writeDataReference(29, self.player.selected_skins[x])

        self.writeVInt(len(self.player.unlocked_skins))
        for x in self.player.unlocked_skins:
            self.writeDataReference(29, x)

        self.writeVInt(0)  # Unknown Array
        for x in range(0):
            self.writeDataReference(0,0)

        self.writeVInt(0)      # Leaderboard Global TID
        self.writeVInt(self.player.high_trophies)  # Trophy Road Reached Icon
        self.writeVInt(0)      # Unknown
        self.writeVInt(0)      # Unknown

        self.writeUInt8(0)     # Is Token Limit Reached

        self.writeVInt(self.player.token_doubler)
        self.writeVInt(99999)  # Trophy Road Timer
        self.writeVInt(0)      # Power Play Timer
        self.writeVInt(99999)  # Brawl Pass Timer

        self.writeVInt(0)  # Unknown

        self.writeBoolean(False)
        self.writeBoolean(False)

        self.writeUInt8(4) # Shop Token Doubler

        self.writeVInt(2) # Unknown
        self.writeVInt(2) # Unknown
        self.writeVInt(2) # Unknown

        self.writeVInt(0) # Name Change Cost
        self.writeVInt(0) # Name Change Timer

        self.writeVInt(1)#Shop
        self.writeVInt(2) # item count
        
        self.writeVInt(10) #1
        self.writeVInt(999)
        self.writeDataReference(0, 0)
        self.writeVInt(0)
        
        self.writeVInt(16) #2
        self.writeVInt(999)
        self.writeDataReference(0, 0)
        self.writeVInt(0)
   
        
                  
        self.writeVInt(0)#type
        self.writeVInt(-1)#cost
        self.writeVInt(999)#timer
        
        self.writeVInt(1)
        self.writeVInt(100)
        self.writeUInt8(0)
        
        self.writeUInt8(0)
        self.writeVInt(0)#daily
        self.writeUInt8(0)
        self.writeVInt(0)
        
        self.writeInt(0)
        self.writeStringReference("OFFER")
        
        self.writeUInt8(0)
        self.writeString()
        self.writeVInt(0)
        self.writeUInt8(0)
        self.writeVInt(2)
        self.writeVInt(0)

        self.writeVInt(0)  # AdStatus
        for x in range(0):
            self.writeVInt(0)
            self.writeVInt(0)
            self.writeVInt(0)

        self.writeVInt(200) # Available Battle Tokens
        self.writeVInt(0)   # Time till Bonus Tokens

        self.writeVInt(0)  # Unknown Array
        for x in range(0):
            self.writeVInt(x)

        self.writeVInt(0)
        self.writeVInt(0)  # Unknown

        self.writeDataReference(16, self.player.home_brawler)

        self.writeString(self.player.region)
        self.writeString(self.player.content_creator)

        self.writeVInt(0)  # Unknown Array
        for x in range(0):
            self.writeInt(0)
            self.writeInt(0)

        self.writeVInt(0)  # CooldownEntry
        for x in range(0):
            self.writeVInt(0)
            self.writeDataReference(0, 0)
            self.writeVInt(0)

        self.writeVInt(1) # BrawlPassSeasonData
        for x in range(1):
            self.writeVInt(3)
            self.writeVInt(-1)
            self.writeUInt8(1)
            self.writeVInt(0)
            self.writeUInt8(0)

        self.writeVInt(0)  # ProLeagueSeasonData
        for x in range(0):
            self.writeVInt(0)
            self.writeVInt(0)

        self.writeBoolean(True) # LogicQuests
        if True:
            self.writeVInt(0)
            for x in range(0):
                self.writeVInt(0)     # Unknown
                self.writeVInt(0)     # Unknown
                self.writeVInt(1)     # Mission Type
                self.writeVInt(2)     # Achieved Goal
                self.writeVInt(8)     # Quest Goal
                self.writeVInt(10)    # Tokens Reward
                self.writeVInt(0)     # Unknown
                self.writeVInt(0)     # Current level
                self.writeVInt(0)     # Max level
                self.writeVInt(1)     # Quest Type
                self.writeUInt8(2)    # Quest State
                self.writeDataReference(16, 0)
                self.writeVInt(0)     # GameMode
                self.writeVInt(0)     # Unknown
                self.writeVInt(0)     # Unknown

        # Emotes Array
        self.writeBoolean(True)
        if True:
            self.writeVInt(len(self.player.emotes_id))
            for x in self.player.emotes_id:
                self.writeDataReference(52, x)
                self.writeVInt(1)     # Unknown
                self.writeVInt(1)     # Unknown
                self.writeVInt(1)     # Unknown


                


        time_stamp = int(datetime.timestamp(datetime.now()))

        self.writeVInt(time_stamp)
        self.writeVInt(6)
        self.writeVInt(0)

        self.writeVInt(30)
        self.writeVInt(80)

        self.writeVInt(170)
        self.writeVInt(350)

        self.writeVInt(0)
        for x in range(0):
            self.writeVInt(x)

        self.writeVInt(3) #1-напиток 2-робот 3-метеорит 4-пиявка 11-качается
        for i in range(3):
            self.writeVInt(i) #count

        self.writeVInt(3) #count
        
        self.writeVInt(0 + 1) # id event
        self.writeVInt(0 + 1) # id event
        self.writeVInt(0)
        self.writeVInt(9999)
        self.writeVInt(0)

        self.writeDataReference(15, 5)

        self.writeVInt(0)
        self.writeVInt(3)
        
        #повер плей
        self.writeString()
        self.writeVInt(0)
        self.writeVInt(0)
        self.writeVInt(0)
        #енд
        
        #модиф
        self.writeVInt(1)# count
        self.writeVInt(1)# id
        #енд
        
        #испа
        self.writeVInt(0)
        self.writeVInt(0)
        self.writeBoolean(False)
        #енд
        
        self.writeVInt(1 + 1) # id event
        self.writeVInt(1 + 1) # id event
        self.writeVInt(0)
        self.writeVInt(9999)
        self.writeVInt(0)

        self.writeDataReference(15, 122)

        self.writeVInt(0)
        self.writeVInt(3)
        
        #повер плей
        self.writeString()
        self.writeVInt(0)
        self.writeVInt(0)
        self.writeVInt(0)
        #енд
        
        #модиф
        self.writeVInt(2)# count
        self.writeVInt(2)# id
        self.writeVInt(4)# id
        #енд
        
        #испа
        self.writeVInt(0)
        self.writeVInt(0)
        self.writeBoolean(False)
        #енд
        


        self.writeVInt(2 + 1) # id event
        self.writeVInt(2 + 1) # id event
        self.writeVInt(0)
        self.writeVInt(9999)
        self.writeVInt(0)

        self.writeDataReference(15, 115)

        self.writeVInt(0)
        self.writeVInt(3)
        
        #повер плей
        self.writeString()
        self.writeVInt(0)
        self.writeVInt(0)
        self.writeVInt(0)
        #енд
        
        #модиф
        self.writeVInt(1)# count
        self.writeVInt(0)# id
        #енд
        
        #испа
        self.writeVInt(0)
        self.writeVInt(0)
        self.writeBoolean(False)
        #енд


        self.writeVInt(0) #up coming
        for x in range(0):
            pass


        self.writeArrayVint([20, 35, 75, 140, 290, 480, 800, 1250])# upgrade
        self.writeArrayVint([1, 2, 3, 4, 5, 10, 15, 20])
        # Tickets
        self.writeArrayVint([10, 30, 80])
        self.writeArrayVint([6, 20, 60])
        # Gold
        self.writeArrayVint([20, 50, 140, 280])#cost
        self.writeArrayVint([150, 400, 1200, 2600])# count

        self.writeUInt8(1)

        self.writeVInt(0)  # Unknown Array
        for x in range(0):
            # ReleaseEntry::encode
            self.writeDataReference(16,0)
            self.writeInt(99999)
            self.writeInt(0)

        self.writeVInt(1)  # Menu Theme Array
        for x in range(1):
            # IntValueEntry::encode
            self.writeInt(1)         # Unknown
            self.writeInt(41000000 + 22)  # Theme ID

        self.writeVInt(0)
        for x in range(0):
            # CustomEvent::encode
            self.writeVInt(0)
            self.writeVInt(0)
            self.writeVInt(0)
            self.writeVInt(0)


        self.writeVInt(0)
        for x in range(0):
            self.writeVInt(0)
            self.writeVInt(0)
            for x in range(3):
                self.writeInt(0)
                self.writeStringReference('')
                
        self.writeLong(self.player.ID)

        self.writeVInt(1)  # notifications
        
        self.writeVInt(81)
        self.writeInt(3)
        self.writeBoolean(False)
        self.writeInt(0) #time
        self.writeString("")
        self.writeVInt(0)# from

        self.writeVInt(0)  # Unknown

        self.writeUInt8(0) # Unknown
        

        self.writeVInt(0)
        self.writeVInt(0)

        for x in range(3):
            self.writeLogicLong(self.player.ID)

        if self.player.name == "Guest" and not self.player.name_set:
            self.writeString("Guest")
            self.writeVInt(0)
        else:
            self.writeString(self.player.name)
            self.writeVInt(1)

        self.writeInt(0)

        self.writeVInt(8) # Commodity Array

        self.player.brawlers_card_id = []
        for x in self.player.brawlers_unlocked:
            self.player.brawlers_card_id.append(Cards().get_unlock_by_brawler_id(x))

        # Unlocked Brawlers & Resources array
        self.writeVInt(len(self.player.resources) + len(self.player.brawlers_card_id))

        for x in self.player.brawlers_card_id:
            self.writeDataReference(23, x)
            self.writeVInt(1)

        for resource in self.player.resources:
            self.writeDataReference(5, resource['ID'])
            self.writeVInt(resource['Amount'])

        self.writeVInt(len(self.player.brawlers_id))
        for x in self.player.brawlers_id:
            self.writeDataReference(16, x)
            self.writeVInt(self.player.brawlers_trophies[str(x)])

        self.writeVInt(len(self.player.brawlers_id))
        for x in self.player.brawlers_id:
            self.writeDataReference(16, x)
            self.writeVInt(self.player.brawlers_high_trophies[str(x)])

        self.writeVInt(0)
        for x in range(0):
            self.writeDataReference(16, x)
            self.writeVInt(0)

        self.writeVInt(len(self.player.brawlers_unlocked))
        for x in self.player.brawlers_unlocked:
            self.writeDataReference(16, x)
            self.writeVInt(self.player.brawlers_powerpoints[str(x)])

        self.writeVInt(len(self.player.brawlers_id))
        for x in self.player.brawlers_id:
            self.writeDataReference(16, x)
            self.writeVInt(self.player.brawlers_level[str(x)])

        self.writeVInt(len(self.player.brawlers_spg))
        for x in self.player.brawlers_spg:
            self.writeDataReference(23, x)
            self.writeVInt(1)

        self.writeVInt(0)  # New Brawlers Array
        for x in range(0):
            self.writeDataReference(16, x)
            self.writeVInt(0)

        self.writeVInt(self.player.gems)  # Player Gems
        self.writeVInt(self.player.gems)  # Player Free Gems

        self.writeVInt(0) # npc nps hz
        self.writeVInt(0)
        self.writeVInt(0)
        self.writeVInt(0)
        self.writeVInt(0)
        self.writeVInt(0)
        self.writeVInt(0)
        self.writeVInt(0)
        self.writeVInt(0)

        self.writeVInt(2) # Tutorial State
        self.writeVInt(self.time_stamp)

